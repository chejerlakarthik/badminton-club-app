service: badminton-club-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'ap-southeast-2'}  # Sydney region
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  timeout: 30

  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    USERS_TABLE: ${self:service}-${self:provider.stage}-users
    POLLS_TABLE: ${self:service}-${self:provider.stage}-polls
    RESPONSES_TABLE: ${self:service}-${self:provider.stage}-responses
    EXPENSES_TABLE: ${self:service}-${self:provider.stage}-expenses
    INVITATIONS_TABLE: ${self:service}-${self:provider.stage}-invitations
    CLUB_SETTINGS_TABLE: ${self:service}-${self:provider.stage}-club-settings
    JWT_SECRET: ${ssm:/badminton-club/${self:provider.stage}/jwt-secret}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POLLS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESPONSES_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.INVITATIONS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CLUB_SETTINGS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESPONSES_TABLE}/index/*"
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*"
        - Effect: Allow
          Action:
            - sns:Publish
          Resource: "*"
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource: "*"

plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:
  # Authentication
  register:
    handler: src/functions/auth/register.handler
    events:
      - http:
          path: auth/register
          method: post
          cors: true

  login:
    handler: src/functions/auth/login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  # User Management
  getProfile:
    handler: src/functions/users/getProfile.handler
    events:
      - http:
          path: users/profile
          method: get
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300

  updateProfile:
    handler: src/functions/users/updateProfile.handler
    events:
      - http:
          path: users/profile
          method: put
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300

  getMembers:
    handler: src/functions/users/getMembers.handler
    events:
      - http:
          path: users/members
          method: get
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300

  # Poll Management
  getCurrentPoll:
    handler: src/functions/polls/getCurrentPoll.handler
    events:
      - http:
          path: polls/current
          method: get
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300

  createPoll:
    handler: src/functions/polls/createPoll.handler
    events:
      - http:
          path: polls
          method: post
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300

  submitResponse:
    handler: src/functions/polls/submitResponse.handler
    events:
      - http:
          path: polls/{pollId}/responses
          method: post
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300

  getPollHistory:
    handler: src/functions/polls/getPollHistory.handler
    events:
      - http:
          path: polls/history
          method: get
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300

  # Invitations
  sendInvitation:
    handler: src/functions/invitations/sendInvitation.handler
    events:
      - http:
          path: invitations/send
          method: post
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300

  acceptInvitation:
    handler: src/functions/invitations/acceptInvitation.handler
    events:
      - http:
          path: invitations/{token}/accept
          method: post
          cors: true

  # Expenses
  getExpenses:
    handler: src/functions/expenses/getExpenses.handler
    events:
      - http:
          path: expenses
          method: get
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300

  createExpense:
    handler: src/functions/expenses/createExpense.handler
    events:
      - http:
          path: expenses
          method: post
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300

  # Settings
  getSettings:
    handler: src/functions/settings/getSettings.handler
    events:
      - http:
          path: settings
          method: get
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300

  updateSettings:
    handler: src/functions/settings/updateSettings.handler
    events:
      - http:
          path: settings
          method: put
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 300

  # Scheduled Functions
  autoCreateWeeklyPoll:
    handler: src/functions/scheduled/autoCreateWeeklyPoll.handler
    events:
      - schedule: cron(0 10 ? * MON *)  # Every Monday at 10 AM

  freezePolls:
    handler: src/functions/scheduled/freezePolls.handler
    events:
      - schedule: cron(0 */1 * * ? *)  # Every hour to check for polls to freeze

  sendReminders:
    handler: src/functions/scheduled/sendReminders.handler
    events:
      - schedule: cron(0 18 ? * TUE *)  # Every Tuesday at 6 PM

  # Authorization
  authorizer:
    handler: src/functions/auth/authorizer.handler

resources:
  Resources:
    # DynamoDB Tables
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    PollsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.POLLS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pollId
            AttributeType: S
          - AttributeName: sessionDate
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: pollId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: SessionDateIndex
            KeySchema:
              - AttributeName: sessionDate
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: sessionDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    ResponsesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.RESPONSES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: responseId
            AttributeType: S
          - AttributeName: pollId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: responseId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: PollIndex
            KeySchema:
              - AttributeName: pollId
                KeyType: HASH
              - AttributeName: userId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    ExpensesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.EXPENSES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: expenseId
            AttributeType: S
          - AttributeName: sessionDate
            AttributeType: S
        KeySchema:
          - AttributeName: expenseId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: SessionDateIndex
            KeySchema:
              - AttributeName: sessionDate
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    InvitationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.INVITATIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: invitationId
            AttributeType: S
          - AttributeName: token
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: invitationId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TokenIndex
            KeySchema:
              - AttributeName: token
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ClubSettingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CLUB_SETTINGS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: settingKey
            AttributeType: S
        KeySchema:
          - AttributeName: settingKey
            KeyType: HASH

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiId

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiRootResourceId