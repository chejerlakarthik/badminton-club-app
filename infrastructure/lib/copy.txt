import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as dynamodb from 'aws-cdk-lib/aws-dynamodb';
import * as events from 'aws-cdk-lib/aws-events';
import * as targets from 'aws-cdk-lib/aws-events-targets';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as ssm from 'aws-cdk-lib/aws-ssm';

export class BadmintonClubStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // DynamoDB Tables
    const usersTable = new dynamodb.TableV2(this, 'UsersTable', {
      tableName: `badminton-club-api-${this.node.tryGetContext('stage')}-users`,
      partitionKey: { name: 'userId', type: dynamodb.AttributeType.STRING },
      billing: dynamodb.Billing.onDemand(),
      removalPolicy: cdk.RemovalPolicy.RETAIN,
      globalSecondaryIndexes: [
        {
          indexName: 'EmailIndex',
          partitionKey: { name: 'email', type: dynamodb.AttributeType.STRING },
          projectionType: dynamodb.ProjectionType.ALL,
        },
      ],
    });
    const pollsTable = new dynamodb.TableV2(this, 'PollsTable', {
      tableName: `badminton-club-api-${this.node.tryGetContext('stage')}-polls`,
      partitionKey: { name: 'pollId', type: dynamodb.AttributeType.STRING },
      billing: dynamodb.Billing.onDemand(),
      removalPolicy: cdk.RemovalPolicy.RETAIN,
      globalSecondaryIndexes: [
        {
          indexName: 'SessionDateIndex',
          partitionKey: { name: 'sessionDate', type: dynamodb.AttributeType.STRING },
          projectionType: dynamodb.ProjectionType.ALL,
        },
        {
          indexName: 'StatusIndex',
          partitionKey: { name: 'status', type: dynamodb.AttributeType.STRING },
          sortKey: { name: 'sessionDate', type: dynamodb.AttributeType.STRING },
          projectionType: dynamodb.ProjectionType.ALL,
        },
      ],
    });
    const responsesTable = new dynamodb.TableV2(this, 'ResponsesTable', {
      tableName: `badminton-club-api-${this.node.tryGetContext('stage')}-responses`,
      partitionKey: { name: 'responseId', type: dynamodb.AttributeType.STRING },
      billing: dynamodb.Billing.onDemand(),
      removalPolicy: cdk.RemovalPolicy.RETAIN,
      globalSecondaryIndexes: [
        {
          indexName: 'PollIndex',
          partitionKey: { name: 'pollId', type: dynamodb.AttributeType.STRING },
          sortKey: { name: 'userId', type: dynamodb.AttributeType.STRING },
          projectionType: dynamodb.ProjectionType.ALL,
        },
      ],
    });
    const expensesTable = new dynamodb.TableV2(this, 'ExpensesTable', {
      tableName: `badminton-club-api-${this.node.tryGetContext('stage')}-expenses`,
      partitionKey: { name: 'expenseId', type: dynamodb.AttributeType.STRING },
      billing: dynamodb.Billing.onDemand(),
      removalPolicy: cdk.RemovalPolicy.RETAIN,
      globalSecondaryIndexes: [
        {
          indexName: 'SessionDateIndex',
          partitionKey: { name: 'sessionDate', type: dynamodb.AttributeType.STRING },
          projectionType: dynamodb.ProjectionType.ALL,
        },
      ],
    });
    const invitationsTable = new dynamodb.TableV2(this, 'InvitationsTable', {
      tableName: `badminton-club-api-${this.node.tryGetContext('stage')}-invitations`,
      partitionKey: { name: 'invitationId', type: dynamodb.AttributeType.STRING },
      billing: dynamodb.Billing.onDemand(),
      removalPolicy: cdk.RemovalPolicy.RETAIN,
      globalSecondaryIndexes: [
        {
          indexName: 'TokenIndex',
          partitionKey: { name: 'token', type: dynamodb.AttributeType.STRING },
          projectionType: dynamodb.ProjectionType.ALL,
        },
        {
          indexName: 'EmailIndex',
          partitionKey: { name: 'email', type: dynamodb.AttributeType.STRING },
          projectionType: dynamodb.ProjectionType.ALL,
        },
      ],
    });
    const clubSettingsTable = new dynamodb.TableV2(this, 'ClubSettingsTable', {
      tableName: `badminton-club-api-${this.node.tryGetContext('stage')}-club-settings`,
      partitionKey: { name: 'settingKey', type: dynamodb.AttributeType.STRING },
      billing: dynamodb.Billing.onDemand(),
      removalPolicy: cdk.RemovalPolicy.RETAIN,
    });

    // Lambda function environment variables
    const lambdaEnv = {
      STAGE: this.node.tryGetContext('stage') || 'dev',
      REGION: this.region,
      USERS_TABLE: usersTable.tableName,
      POLLS_TABLE: pollsTable.tableName,
      RESPONSES_TABLE: responsesTable.tableName,
      EXPENSES_TABLE: expensesTable.tableName,
      INVITATIONS_TABLE: invitationsTable.tableName,
      CLUB_SETTINGS_TABLE: clubSettingsTable.tableName,
      JWT_SECRET: ssm.StringParameter.valueForStringParameter(
          this,
          `/badminton-club/${this.node.tryGetContext('stage') || 'dev'}/jwt-secret`
      ),
    };

    // Helper to create Lambda functions
    const createLambda = (id: string, handler: string) => {
      const fn = new lambda.Function(this, id, {
        runtime: lambda.Runtime.NODEJS_18_X,
        handler,
        code: lambda.Code.fromAsset('../backend/build'),
        memorySize: 256,
        timeout: cdk.Duration.seconds(30),
        environment: lambdaEnv,
      });
      usersTable.grantReadWriteData(fn);
      pollsTable.grantReadWriteData(fn);
      responsesTable.grantReadWriteData(fn);
      expensesTable.grantReadWriteData(fn);
      invitationsTable.grantReadWriteData(fn);
      clubSettingsTable.grantReadWriteData(fn);
      // Grant SES, SNS, EventBridge permissions
      fn.addToRolePolicy(new iam.PolicyStatement({
        actions: [
          "ses:SendEmail",
          "ses:SendRawEmail",
          "sns:Publish",
          "events:PutEvents"
        ],
        resources: ["*"]
      }));
      return fn;
    };

    // Lambda Functions
    const registerLambda = createLambda('RegisterLambda', 'app/lambdas/auth/register.handler');
    const loginLambda = createLambda('LoginLambda', 'app/lambdas/auth/login.handler');
    const getProfileLambda = createLambda('GetProfileLambda', 'app/lambdas/users/get-profile.handler');
    const updateProfileLambda = createLambda('UpdateProfileLambda', 'app/lambdas/users/update-profile.handler');
    const createBookingLambda = createLambda('CreateBookingLambda', 'app/lambdas/bookings/create.handler');
    const createCourtLambda = createLambda('CreateCourtLambda', 'app/lambdas/courts/create-court.handler');
    const getCourtsLambda = createLambda('GetCourtsLambda', 'app/lambdas/courts/get-courts.handler');
    const bookingProcessorLambda = createLambda('BookingProcessorLambda', 'app/lambdas/events/booking-processor.handler');

    // API Gateway
    const api = new apigateway.RestApi(this, 'BadmintonClubApi', {
      restApiName: 'Badminton Club Service',
      deployOptions: {
        stageName: lambdaEnv.STAGE,
      },
      defaultCorsPreflightOptions: {
        allowOrigins: apigateway.Cors.ALL_ORIGINS,
        allowMethods: apigateway.Cors.ALL_METHODS,
      },
    });

    // Auth routes (no authorization required)
    const auth = api.root.addResource('auth');
    auth.addResource('register').addMethod('POST', new apigateway.LambdaIntegration(registerLambda));
    auth.addResource('login').addMethod('POST', new apigateway.LambdaIntegration(loginLambda));

    // User routes
    const users = api.root.addResource('users');
    users.addResource('profile').addMethod('GET', new apigateway.LambdaIntegration(getProfileLambda));
    users.addResource('profile').addMethod('PUT', new apigateway.LambdaIntegration(updateProfileLambda));

    // Booking routes
    const bookings = api.root.addResource('bookings');
    bookings.addMethod('POST', new apigateway.LambdaIntegration(createBookingLambda));

    // Court routes
    const courts = api.root.addResource('courts');
    courts.addMethod('POST', new apigateway.LambdaIntegration(createCourtLambda));
    courts.addMethod('GET', new apigateway.LambdaIntegration(getCourtsLambda));

    // Scheduled Lambdas
    new events.Rule(this, 'AutoCreateWeeklyPollSchedule', {
      schedule: events.Schedule.cron({ minute: '0', hour: '10', weekDay: 'MON' }),
      targets: [new targets.LambdaFunction(autoCreateWeeklyPollLambda)],
    });
    new events.Rule(this, 'FreezePollsSchedule', {
      schedule: events.Schedule.cron({ minute: '0', hour: '*', }),
      targets: [new targets.LambdaFunction(freezePollsLambda)],
    });
    new events.Rule(this, 'SendRemindersSchedule', {
      schedule: events.Schedule.cron({ minute: '0', hour: '18', weekDay: 'TUE' }),
      targets: [new targets.LambdaFunction(sendRemindersLambda)],
    });

    // Outputs
    new cdk.CfnOutput(this, 'ApiGatewayRestApiId', {
      value: api.restApiId,
    });
    new cdk.CfnOutput(this, 'ApiGatewayRestApiRootResourceId', {
      value: api.restApiRootResourceId,
    });
  }
}