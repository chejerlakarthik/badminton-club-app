"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const uuid_1 = require("uuid");
const zod_1 = require("zod");
const response_1 = require("../../utils/response");
const auth_1 = require("../../utils/auth");
const database_1 = require("../../utils/database");
const events_1 = require("../../utils/events");
const RegisterSchema = zod_1.z.object({
    firstName: zod_1.z.string().min(1),
    lastName: zod_1.z.string().min(1),
    email: zod_1.z.string().email(),
    password: zod_1.z.string().min(6),
    phone: zod_1.z.string().min(10),
    membershipType: zod_1.z.enum(['basic', 'premium', 'student', 'family']).optional(),
    skillLevel: zod_1.z.enum(['beginner', 'intermediate', 'advanced']).optional()
});
const handler = async (event) => {
    try {
        if (!event.body) {
            return (0, response_1.createErrorResponse)(400, 'Request body is required');
        }
        const body = JSON.parse(event.body);
        const validatedData = RegisterSchema.parse(body);
        // Check if user already exists
        const existingUser = await database_1.DatabaseService.query('USER#', validatedData.email);
        if (existingUser.length > 0) {
            return (0, response_1.createErrorResponse)(400, 'User already exists');
        }
        const userId = (0, uuid_1.v4)();
        const passwordHash = await (0, auth_1.hashPassword)(validatedData.password);
        const now = new Date().toISOString();
        const membershipExpiry = new Date();
        membershipExpiry.setFullYear(membershipExpiry.getFullYear() + 1);
        const user = {
            PK: `USER#${userId}`,
            SK: `USER#${userId}`,
            userId,
            email: validatedData.email,
            firstName: validatedData.firstName,
            lastName: validatedData.lastName,
            phone: validatedData.phone,
            passwordHash,
            membershipType: validatedData.membershipType || 'basic',
            membershipExpiry: membershipExpiry.toISOString(),
            skillLevel: validatedData.skillLevel || 'beginner',
            role: 'member',
            isActive: true,
            createdAt: now,
            updatedAt: now
        };
        await database_1.DatabaseService.put(user);
        // Generate JWT token
        const token = (0, auth_1.generateToken)({
            userId: user.userId,
            email: user.email,
            role: user.role
        });
        // Publish user registration event
        await events_1.EventService.publishUserEvent('User Registered', {
            userId: user.userId,
            email: user.email,
            firstName: user.firstName,
            lastName: user.lastName
        });
        const responseData = {
            token,
            user: {
                id: user.userId,
                firstName: user.firstName,
                lastName: user.lastName,
                email: user.email,
                membershipType: user.membershipType,
                role: user.role
            }
        };
        return (0, response_1.createSuccessResponse)(responseData, 'User registered successfully');
    }
    catch (error) {
        console.error('Registration error:', error);
        if (error instanceof zod_1.z.ZodError) {
            return (0, response_1.createErrorResponse)(400, error.errors[0]?.message || 'Validation error');
        }
        return (0, response_1.createErrorResponse)(500, 'Internal server error');
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,