"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const uuid_1 = require("uuid");
const zod_1 = require("zod");
const response_1 = require("../../utils/response");
const auth_1 = require("../../utils/auth");
const database_1 = require("../../utils/database");
const CreateCourtSchema = zod_1.z.object({
    name: zod_1.z.string().min(1),
    type: zod_1.z.enum(['indoor', 'outdoor']),
    hourlyRate: zod_1.z.number().positive(),
    description: zod_1.z.string().optional()
});
const handler = async (event) => {
    try {
        if (!event.body) {
            return (0, response_1.createErrorResponse)(400, 'Request body is required');
        }
        const user = (0, auth_1.getUserFromEvent)(event);
        // Check if the user is admin
        if (user.role !== 'admin') {
            return (0, response_1.createErrorResponse)(403, 'Admin access required');
        }
        const body = JSON.parse(event.body);
        const courtData = CreateCourtSchema.parse(body);
        const courtId = (0, uuid_1.v4)();
        const now = new Date().toISOString();
        const court = {
            PK: `COURT#${courtId}`,
            SK: `COURT#${courtId}`,
            courtId,
            ...courtData,
            isActive: true,
            createdAt: now,
            updatedAt: now,
            description: courtData.description ?? 'Court 8'
        };
        await database_1.DatabaseService.put(court);
        return (0, response_1.createSuccessResponse)(court, 'Court created successfully');
    }
    catch (error) {
        console.error('Create court error:', error);
        if (error instanceof zod_1.z.ZodError) {
            return (0, response_1.createErrorResponse)(400, error.errors[0]?.message || 'Validation error');
        }
        if (error.message.includes('authorization')) {
            return (0, response_1.createErrorResponse)(401, error.message);
        }
        return (0, response_1.createErrorResponse)(500, 'Internal server error');
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWNvdXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwcC9sYW1iZGFzL2NvdXJ0cy9jcmVhdGUtY291cnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsK0JBQW9DO0FBQ3BDLDZCQUF3QjtBQUN4QixtREFBa0Y7QUFDbEYsMkNBQW9EO0FBQ3BELG1EQUF1RDtBQUd2RCxNQUFNLGlCQUFpQixHQUFHLE9BQUMsQ0FBQyxNQUFNLENBQUM7SUFDL0IsSUFBSSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxPQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ25DLFVBQVUsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2pDLFdBQVcsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0NBQ3JDLENBQUMsQ0FBQztBQUVJLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUEyQixFQUFrQyxFQUFFO0lBQ3pGLElBQUksQ0FBQztRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDZCxPQUFPLElBQUEsOEJBQW1CLEVBQUMsR0FBRyxFQUFFLDBCQUEwQixDQUFDLENBQUM7UUFDaEUsQ0FBQztRQUVELE1BQU0sSUFBSSxHQUFHLElBQUEsdUJBQWdCLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFFckMsNkJBQTZCO1FBQzdCLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUUsQ0FBQztZQUN4QixPQUFPLElBQUEsOEJBQW1CLEVBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDLENBQUM7UUFDN0QsQ0FBQztRQUVELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sU0FBUyxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoRCxNQUFNLE9BQU8sR0FBRyxJQUFBLFNBQU0sR0FBRSxDQUFDO1FBQ3pCLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFckMsTUFBTSxLQUFLLEdBQVU7WUFDakIsRUFBRSxFQUFFLFNBQVMsT0FBTyxFQUFFO1lBQ3RCLEVBQUUsRUFBRSxTQUFTLE9BQU8sRUFBRTtZQUN0QixPQUFPO1lBQ1AsR0FBRyxTQUFTO1lBQ1osUUFBUSxFQUFFLElBQUk7WUFDZCxTQUFTLEVBQUUsR0FBRztZQUNkLFNBQVMsRUFBRSxHQUFHO1lBQ2QsV0FBVyxFQUFFLFNBQVMsQ0FBQyxXQUFXLElBQUksU0FBUztTQUNsRCxDQUFDO1FBRUYsTUFBTSwwQkFBZSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVqQyxPQUFPLElBQUEsZ0NBQXFCLEVBQUMsS0FBSyxFQUFFLDRCQUE0QixDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTVDLElBQUksS0FBSyxZQUFZLE9BQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUM5QixPQUFPLElBQUEsOEJBQW1CLEVBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxJQUFJLGtCQUFrQixDQUFDLENBQUM7UUFDcEYsQ0FBQztRQUVELElBQUssS0FBZSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQztZQUNyRCxPQUFPLElBQUEsOEJBQW1CLEVBQUMsR0FBRyxFQUFHLEtBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5RCxDQUFDO1FBRUQsT0FBTyxJQUFBLDhCQUFtQixFQUFDLEdBQUcsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO0lBQzdELENBQUM7QUFDTCxDQUFDLENBQUM7QUE5Q1csUUFBQSxPQUFPLFdBOENsQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUdhdGV3YXlQcm94eUV2ZW50LCBBUElHYXRld2F5UHJveHlSZXN1bHQgfSBmcm9tICdhd3MtbGFtYmRhJztcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBjcmVhdGVTdWNjZXNzUmVzcG9uc2UsIGNyZWF0ZUVycm9yUmVzcG9uc2UgfSBmcm9tICcuLi8uLi91dGlscy9yZXNwb25zZSc7XG5pbXBvcnQgeyBnZXRVc2VyRnJvbUV2ZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvYXV0aCc7XG5pbXBvcnQgeyBEYXRhYmFzZVNlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9kYXRhYmFzZSc7XG5pbXBvcnQgeyBDb3VydCB9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuY29uc3QgQ3JlYXRlQ291cnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgbmFtZTogei5zdHJpbmcoKS5taW4oMSksXG4gICAgdHlwZTogei5lbnVtKFsnaW5kb29yJywgJ291dGRvb3InXSksXG4gICAgaG91cmx5UmF0ZTogei5udW1iZXIoKS5wb3NpdGl2ZSgpLFxuICAgIGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKClcbn0pO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogQVBJR2F0ZXdheVByb3h5RXZlbnQpOiBQcm9taXNlPEFQSUdhdGV3YXlQcm94eVJlc3VsdD4gPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghZXZlbnQuYm9keSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDAwLCAnUmVxdWVzdCBib2R5IGlzIHJlcXVpcmVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1c2VyID0gZ2V0VXNlckZyb21FdmVudChldmVudCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHVzZXIgaXMgYWRtaW5cbiAgICAgICAgaWYgKHVzZXIucm9sZSAhPT0gJ2FkbWluJykge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDAzLCAnQWRtaW4gYWNjZXNzIHJlcXVpcmVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5wYXJzZShldmVudC5ib2R5KTtcbiAgICAgICAgY29uc3QgY291cnREYXRhID0gQ3JlYXRlQ291cnRTY2hlbWEucGFyc2UoYm9keSk7XG5cbiAgICAgICAgY29uc3QgY291cnRJZCA9IHV1aWR2NCgpO1xuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG5cbiAgICAgICAgY29uc3QgY291cnQ6IENvdXJ0ID0ge1xuICAgICAgICAgICAgUEs6IGBDT1VSVCMke2NvdXJ0SWR9YCxcbiAgICAgICAgICAgIFNLOiBgQ09VUlQjJHtjb3VydElkfWAsXG4gICAgICAgICAgICBjb3VydElkLFxuICAgICAgICAgICAgLi4uY291cnREYXRhLFxuICAgICAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IG5vdyxcbiAgICAgICAgICAgIHVwZGF0ZWRBdDogbm93LFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGNvdXJ0RGF0YS5kZXNjcmlwdGlvbiA/PyAnQ291cnQgOCdcbiAgICAgICAgfTtcblxuICAgICAgICBhd2FpdCBEYXRhYmFzZVNlcnZpY2UucHV0KGNvdXJ0KTtcblxuICAgICAgICByZXR1cm4gY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlKGNvdXJ0LCAnQ291cnQgY3JlYXRlZCBzdWNjZXNzZnVsbHknKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdDcmVhdGUgY291cnQgZXJyb3I6JywgZXJyb3IpO1xuXG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIHouWm9kRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKDQwMCwgZXJyb3IuZXJyb3JzWzBdPy5tZXNzYWdlIHx8ICdWYWxpZGF0aW9uIGVycm9yJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlLmluY2x1ZGVzKCdhdXRob3JpemF0aW9uJykpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKDQwMSwgKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKDUwMCwgJ0ludGVybmFsIHNlcnZlciBlcnJvcicpO1xuICAgIH1cbn07Il19