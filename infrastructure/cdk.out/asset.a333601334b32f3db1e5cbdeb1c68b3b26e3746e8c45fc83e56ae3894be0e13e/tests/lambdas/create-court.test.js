"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const create_court_1 = require("../../app/lambdas/courts/create-court");
const database_1 = require("../../app/utils/database");
const response_1 = require("../../app/utils/response");
const auth_1 = require("../../app/utils/auth");
const vitest_1 = require("vitest");
vitest_1.vi.mock('../../app/utils/database');
vitest_1.vi.mock('../../app/utils/response');
vitest_1.vi.mock('../../app/utils/auth');
(0, vitest_1.describe)('Create Court Lambda Handler', () => {
    (0, vitest_1.beforeEach)(() => {
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.it)('returns success response when court is created successfully', async () => {
        const mockEvent = {
            body: JSON.stringify({
                name: 'Court 1',
                type: 'indoor',
                hourlyRate: 50,
                description: 'A great indoor court'
            }),
        };
        auth_1.getUserFromEvent.mockReturnValue({ role: 'admin' });
        database_1.DatabaseService.put.mockResolvedValue(undefined);
        response_1.createSuccessResponse.mockReturnValue({ statusCode: 200 });
        const result = await (0, create_court_1.handler)(mockEvent);
        (0, vitest_1.expect)(result).toEqual({ statusCode: 200 });
        (0, vitest_1.expect)(database_1.DatabaseService.put).toHaveBeenCalled();
    });
    (0, vitest_1.it)('returns error response when request body is missing', async () => {
        const mockEvent = {};
        const result = await (0, create_court_1.handler)(mockEvent);
        (0, vitest_1.expect)(result).toEqual((0, response_1.createErrorResponse)(400, 'Request body is required'));
    });
    (0, vitest_1.it)('returns error response when user is not admin', async () => {
        const mockEvent = {
            body: JSON.stringify({
                name: 'Court 1',
                type: 'indoor',
                hourlyRate: 50
            }),
        };
        auth_1.getUserFromEvent.mockReturnValue({ role: 'user' });
        const result = await (0, create_court_1.handler)(mockEvent);
        (0, vitest_1.expect)(result).toEqual((0, response_1.createErrorResponse)(403, 'Admin access required'));
    });
    (0, vitest_1.it)('returns error response when validation fails', async () => {
        const mockEvent = {
            body: JSON.stringify({
                name: '',
                type: 'indoor',
                hourlyRate: -10
            }),
        };
        auth_1.getUserFromEvent.mockReturnValue({ role: 'admin' });
        const result = await (0, create_court_1.handler)(mockEvent);
        (0, vitest_1.expect)(result).toEqual((0, response_1.createErrorResponse)(400, 'Validation error'));
    });
    (0, vitest_1.it)('returns error response for unexpected errors', async () => {
        const mockEvent = {
            body: JSON.stringify({
                name: 'Court 1',
                type: 'indoor',
                hourlyRate: 50
            }),
        };
        auth_1.getUserFromEvent.mockReturnValue({ role: 'admin' });
        database_1.DatabaseService.put.mockRejectedValue(new Error('Unexpected error'));
        const result = await (0, create_court_1.handler)(mockEvent);
        (0, vitest_1.expect)(result).toEqual((0, response_1.createErrorResponse)(500, 'Internal server error'));
    });
});
//# sourceMappingURL=data:application/json;base64,