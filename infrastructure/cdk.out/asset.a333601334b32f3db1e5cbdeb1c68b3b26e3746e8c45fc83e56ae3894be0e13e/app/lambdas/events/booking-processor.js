"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const database_1 = require("../../utils/database");
const notifications_1 = require("../../utils/notifications");
const handler = async (event) => {
    try {
        console.log('Processing booking event:', event);
        const { detail, 'detail-type': detailType } = event;
        if (detailType === 'Booking Created') {
            await handleBookingCreated(detail);
        }
        else if (detailType === 'Booking Confirmed') {
            await handleBookingConfirmed(detail);
        }
    }
    catch (error) {
        console.error('Error processing booking event:', error);
        throw error;
    }
};
exports.handler = handler;
async function handleBookingCreated(detail) {
    // Send booking confirmation email
    const user = await database_1.DatabaseService.get(`USER#${detail.userId}`, `USER#${detail.userId}`);
    const court = await database_1.DatabaseService.get(`COURT#${detail.courtId}`, `COURT#${detail.courtId}`);
    if (user && court) {
        await notifications_1.NotificationService.sendBookingConfirmation(user, detail, court);
    }
}
async function handleBookingConfirmed(detail) {
    // Handle booking confirmation logic
    console.log('Booking confirmed:', detail);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9va2luZy1wcm9jZXNzb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBwL2xhbWJkYXMvZXZlbnRzL2Jvb2tpbmctcHJvY2Vzc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG1EQUF1RDtBQUN2RCw2REFBZ0U7QUFHekQsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQW9DLEVBQUUsRUFBRTtJQUNsRSxJQUFJLENBQUM7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRWhELE1BQU0sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUVwRCxJQUFJLFVBQVUsS0FBSyxpQkFBaUIsRUFBRSxDQUFDO1lBQ25DLE1BQU0sb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkMsQ0FBQzthQUFNLElBQUksVUFBVSxLQUFLLG1CQUFtQixFQUFFLENBQUM7WUFDNUMsTUFBTSxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QyxDQUFDO0lBQ0wsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLGlDQUFpQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hELE1BQU0sS0FBSyxDQUFDO0lBQ2hCLENBQUM7QUFDTCxDQUFDLENBQUM7QUFmVyxRQUFBLE9BQU8sV0FlbEI7QUFFRixLQUFLLFVBQVUsb0JBQW9CLENBQUMsTUFBVztJQUMzQyxrQ0FBa0M7SUFDbEMsTUFBTSxJQUFJLEdBQUcsTUFBTSwwQkFBZSxDQUFDLEdBQUcsQ0FBQyxRQUFRLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxRQUFRLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBUyxDQUFDO0lBQ2pHLE1BQU0sS0FBSyxHQUFHLE1BQU0sMEJBQWUsQ0FBQyxHQUFHLENBQUMsU0FBUyxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQVUsQ0FBQztJQUV2RyxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNoQixNQUFNLG1DQUFtQixDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDM0UsQ0FBQztBQUNMLENBQUM7QUFFRCxLQUFLLFVBQVUsc0JBQXNCLENBQUMsTUFBVztJQUM3QyxvQ0FBb0M7SUFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM5QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRCcmlkZ2VFdmVudCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgRGF0YWJhc2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvZGF0YWJhc2UnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL25vdGlmaWNhdGlvbnMnO1xuaW1wb3J0IHsgVXNlciwgQ291cnQgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBFdmVudEJyaWRnZUV2ZW50PHN0cmluZywgYW55PikgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdQcm9jZXNzaW5nIGJvb2tpbmcgZXZlbnQ6JywgZXZlbnQpO1xuXG4gICAgICAgIGNvbnN0IHsgZGV0YWlsLCAnZGV0YWlsLXR5cGUnOiBkZXRhaWxUeXBlIH0gPSBldmVudDtcblxuICAgICAgICBpZiAoZGV0YWlsVHlwZSA9PT0gJ0Jvb2tpbmcgQ3JlYXRlZCcpIHtcbiAgICAgICAgICAgIGF3YWl0IGhhbmRsZUJvb2tpbmdDcmVhdGVkKGRldGFpbCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGV0YWlsVHlwZSA9PT0gJ0Jvb2tpbmcgQ29uZmlybWVkJykge1xuICAgICAgICAgICAgYXdhaXQgaGFuZGxlQm9va2luZ0NvbmZpcm1lZChkZXRhaWwpO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyBib29raW5nIGV2ZW50OicsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufTtcblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlQm9va2luZ0NyZWF0ZWQoZGV0YWlsOiBhbnkpIHtcbiAgICAvLyBTZW5kIGJvb2tpbmcgY29uZmlybWF0aW9uIGVtYWlsXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IERhdGFiYXNlU2VydmljZS5nZXQoYFVTRVIjJHtkZXRhaWwudXNlcklkfWAsIGBVU0VSIyR7ZGV0YWlsLnVzZXJJZH1gKSBhcyBVc2VyO1xuICAgIGNvbnN0IGNvdXJ0ID0gYXdhaXQgRGF0YWJhc2VTZXJ2aWNlLmdldChgQ09VUlQjJHtkZXRhaWwuY291cnRJZH1gLCBgQ09VUlQjJHtkZXRhaWwuY291cnRJZH1gKSBhcyBDb3VydDtcblxuICAgIGlmICh1c2VyICYmIGNvdXJ0KSB7XG4gICAgICAgIGF3YWl0IE5vdGlmaWNhdGlvblNlcnZpY2Uuc2VuZEJvb2tpbmdDb25maXJtYXRpb24odXNlciwgZGV0YWlsLCBjb3VydCk7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVCb29raW5nQ29uZmlybWVkKGRldGFpbDogYW55KSB7XG4gICAgLy8gSGFuZGxlIGJvb2tpbmcgY29uZmlybWF0aW9uIGxvZ2ljXG4gICAgY29uc29sZS5sb2coJ0Jvb2tpbmcgY29uZmlybWVkOicsIGRldGFpbCk7XG59Il19