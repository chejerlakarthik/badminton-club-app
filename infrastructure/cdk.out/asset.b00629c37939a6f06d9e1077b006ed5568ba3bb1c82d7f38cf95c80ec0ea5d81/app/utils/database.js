"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseService = exports.TABLE_NAME = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const client = new client_dynamodb_1.DynamoDBClient({ region: process.env.AWS_REGION || 'ap-southeast-2' });
const docClient = lib_dynamodb_1.DynamoDBDocumentClient.from(client);
exports.TABLE_NAME = process.env.MAIN_TABLE || 'BadmintonClubTable';
class DatabaseService {
    static async get(PK, SK) {
        const command = new lib_dynamodb_1.GetCommand({
            TableName: exports.TABLE_NAME,
            Key: { PK, SK }
        });
        const result = await docClient.send(command);
        return result.Item;
    }
    static async put(item) {
        const command = new lib_dynamodb_1.PutCommand({
            TableName: exports.TABLE_NAME,
            Item: item
        });
        await docClient.send(command);
        return item;
    }
    static async update(PK, SK, updates) {
        const updateExpression = Object.keys(updates)
            .map(key => `#${key} = :${key}`)
            .join(', ');
        const expressionAttributeNames = Object.keys(updates).reduce((acc, key) => {
            acc[`#${key}`] = key;
            return acc;
        }, {});
        const expressionAttributeValues = Object.keys(updates).reduce((acc, key) => {
            acc[`:${key}`] = updates[key];
            return acc;
        }, {});
        const command = new lib_dynamodb_1.UpdateCommand({
            TableName: exports.TABLE_NAME,
            Key: { PK, SK },
            UpdateExpression: `SET ${updateExpression}`,
            ExpressionAttributeNames: expressionAttributeNames,
            ExpressionAttributeValues: expressionAttributeValues,
            ReturnValues: 'ALL_NEW'
        });
        const result = await docClient.send(command);
        return result.Attributes;
    }
    static async delete(PK, SK) {
        const command = new lib_dynamodb_1.DeleteCommand({
            TableName: exports.TABLE_NAME,
            Key: { PK, SK }
        });
        await docClient.send(command);
    }
    static async query(PK, SK, indexName) {
        const keyConditionExpression = SK
            ? 'PK = :pk AND begins_with(SK, :sk)'
            : 'PK = :pk';
        const expressionAttributeValues = { ':pk': PK };
        if (SK) {
            expressionAttributeValues[':sk'] = SK;
        }
        const command = new lib_dynamodb_1.QueryCommand({
            TableName: exports.TABLE_NAME,
            IndexName: indexName,
            KeyConditionExpression: keyConditionExpression,
            ExpressionAttributeValues: expressionAttributeValues
        });
        const result = await docClient.send(command);
        return result.Items || [];
    }
    static async queryGSI(gsiPK, gsiSK, indexName = 'GSI1') {
        const keyConditionExpression = gsiSK
            ? `${indexName}PK = :gsiPK AND begins_with(${indexName}SK, :gsiSK)`
            : `${indexName}PK = :gsiPK`;
        const expressionAttributeValues = { ':gsiPK': gsiPK };
        if (gsiSK) {
            expressionAttributeValues[':gsiSK'] = gsiSK;
        }
        const command = new lib_dynamodb_1.QueryCommand({
            TableName: exports.TABLE_NAME,
            IndexName: indexName,
            KeyConditionExpression: keyConditionExpression,
            ExpressionAttributeValues: expressionAttributeValues
        });
        const result = await docClient.send(command);
        return result.Items || [];
    }
    static async scan(filterExpression, expressionAttributeValues) {
        const command = new lib_dynamodb_1.ScanCommand({
            TableName: exports.TABLE_NAME,
            FilterExpression: filterExpression,
            ExpressionAttributeValues: expressionAttributeValues
        });
        const result = await docClient.send(command);
        return result.Items || [];
    }
}
exports.DatabaseService = DatabaseService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXBwL3V0aWxzL2RhdGFiYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhEQUEwRDtBQUMxRCx3REFBZ0o7QUFFaEosTUFBTSxNQUFNLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLGdCQUFnQixFQUFFLENBQUMsQ0FBQztBQUMxRixNQUFNLFNBQVMsR0FBRyxxQ0FBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFekMsUUFBQSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksb0JBQW9CLENBQUM7QUFFekUsTUFBYSxlQUFlO0lBQ3hCLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQVUsRUFBRSxFQUFVO1FBQ25DLE1BQU0sT0FBTyxHQUFHLElBQUkseUJBQVUsQ0FBQztZQUMzQixTQUFTLEVBQUUsa0JBQVU7WUFDckIsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtTQUNsQixDQUFDLENBQUM7UUFFSCxNQUFNLE1BQU0sR0FBRyxNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0MsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFTO1FBQ3RCLE1BQU0sT0FBTyxHQUFHLElBQUkseUJBQVUsQ0FBQztZQUMzQixTQUFTLEVBQUUsa0JBQVU7WUFDckIsSUFBSSxFQUFFLElBQUk7U0FDYixDQUFDLENBQUM7UUFFSCxNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFB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QVMsYUFBYTtZQUNuRSxDQUFDLENBQUMsR0FBRyxTQUFTLGFBQWEsQ0FBQztRQUVoQyxNQUFNLHlCQUF5QixHQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQzNELElBQUksS0FBSyxFQUFFLENBQUM7WUFDUix5QkFBeUIsQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDaEQsQ0FBQztRQUVELE1BQU0sT0FBTyxHQUFHLElBQUksMkJBQVksQ0FBQztZQUM3QixTQUFTLEVBQUUsa0JBQVU7WUFDckIsU0FBUyxFQUFFLFNBQVM7WUFDcEIsc0JBQXNCLEVBQUUsc0JBQXNCO1lBQzlDLHlCQUF5QixFQUFFLHlCQUF5QjtTQUN2RCxDQUFDLENBQUM7UUFFSCxNQUFNLE1BQU0sR0FBRyxNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0MsT0FBTyxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQXlCLEVBQUUseUJBQStCO1FBQ3hFLE1BQU0sT0FBTyxHQUFHLElBQUksMEJBQVcsQ0FBQztZQUM1QixTQUFTLEVBQUUsa0JBQVU7WUFDckIsZ0JBQWdCLEVBQUUsZ0JBQWdCO1lBQ2xDLHlCQUF5QixFQUFFLHlCQUF5QjtTQUN2RCxDQUFDLENBQUM7UUFFSCxNQUFNLE1BQU0sR0FBRyxNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0MsT0FBTyxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztJQUM5QixDQUFDO0NBQ0o7QUE5R0QsMENBOEdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1vREJDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtZHluYW1vZGInO1xuaW1wb3J0IHsgRHluYW1vREJEb2N1bWVudENsaWVudCwgR2V0Q29tbWFuZCwgUHV0Q29tbWFuZCwgVXBkYXRlQ29tbWFuZCwgRGVsZXRlQ29tbWFuZCwgUXVlcnlDb21tYW5kLCBTY2FuQ29tbWFuZCB9IGZyb20gJ0Bhd3Mtc2RrL2xpYi1keW5hbW9kYic7XG5cbmNvbnN0IGNsaWVudCA9IG5ldyBEeW5hbW9EQkNsaWVudCh7IHJlZ2lvbjogcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTiB8fCAnYXAtc291dGhlYXN0LTInIH0pO1xuY29uc3QgZG9jQ2xpZW50ID0gRHluYW1vREJEb2N1bWVudENsaWVudC5mcm9tKGNsaWVudCk7XG5cbmV4cG9ydCBjb25zdCBUQUJMRV9OQU1FID0gcHJvY2Vzcy5lbnYuTUFJTl9UQUJMRSB8fCAnQmFkbWludG9uQ2x1YlRhYmxlJztcblxuZXhwb3J0IGNsYXNzIERhdGFiYXNlU2VydmljZSB7XG4gICAgc3RhdGljIGFzeW5jIGdldChQSzogc3RyaW5nLCBTSzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgR2V0Q29tbWFuZCh7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IFRBQkxFX05BTUUsXG4gICAgICAgICAgICBLZXk6IHsgUEssIFNLIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZG9jQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQuSXRlbTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgcHV0KGl0ZW06IGFueSkge1xuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IFB1dENvbW1hbmQoe1xuICAgICAgICAgICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FLFxuICAgICAgICAgICAgSXRlbTogaXRlbVxuICAgICAgICB9KTtcblxuICAgICAgICBhd2FpdCBkb2NDbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIHVwZGF0ZShQSzogc3RyaW5nLCBTSzogc3RyaW5nLCB1cGRhdGVzOiBhbnkpIHtcbiAgICAgICAgY29uc3QgdXBkYXRlRXhwcmVzc2lvbiA9IE9iamVjdC5rZXlzKHVwZGF0ZXMpXG4gICAgICAgICAgICAubWFwKGtleSA9PiBgIyR7a2V5fSA9IDoke2tleX1gKVxuICAgICAgICAgICAgLmpvaW4oJywgJyk7XG5cbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzID0gT2JqZWN0LmtleXModXBkYXRlcykucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgICAgICAgYWNjW2AjJHtrZXl9YF0gPSBrZXk7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KTtcblxuICAgICAgICBjb25zdCBleHByZXNzaW9uQXR0cmlidXRlVmFsdWVzID0gT2JqZWN0LmtleXModXBkYXRlcykucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgICAgICAgYWNjW2A6JHtrZXl9YF0gPSB1cGRhdGVzW2tleV07XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+KTtcblxuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IFVwZGF0ZUNvbW1hbmQoe1xuICAgICAgICAgICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FLFxuICAgICAgICAgICAgS2V5OiB7IFBLLCBTSyB9LFxuICAgICAgICAgICAgVXBkYXRlRXhwcmVzc2lvbjogYFNFVCAke3VwZGF0ZUV4cHJlc3Npb259YCxcbiAgICAgICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczogZXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzLFxuICAgICAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogZXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlcyxcbiAgICAgICAgICAgIFJldHVyblZhbHVlczogJ0FMTF9ORVcnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRvY0NsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0LkF0dHJpYnV0ZXM7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIGRlbGV0ZShQSzogc3RyaW5nLCBTSzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgRGVsZXRlQ29tbWFuZCh7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IFRBQkxFX05BTUUsXG4gICAgICAgICAgICBLZXk6IHsgUEssIFNLIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXdhaXQgZG9jQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIHF1ZXJ5KFBLOiBzdHJpbmcsIFNLPzogc3RyaW5nLCBpbmRleE5hbWU/OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3Qga2V5Q29uZGl0aW9uRXhwcmVzc2lvbiA9IFNLXG4gICAgICAgICAgICA/ICdQSyA9IDpwayBBTkQgYmVnaW5zX3dpdGgoU0ssIDpzayknXG4gICAgICAgICAgICA6ICdQSyA9IDpwayc7XG5cbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogYW55ID0geyAnOnBrJzogUEsgfTtcbiAgICAgICAgaWYgKFNLKSB7XG4gICAgICAgICAgICBleHByZXNzaW9uQXR0cmlidXRlVmFsdWVzWyc6c2snXSA9IFNLO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBRdWVyeUNvbW1hbmQoe1xuICAgICAgICAgICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FLFxuICAgICAgICAgICAgSW5kZXhOYW1lOiBpbmRleE5hbWUsXG4gICAgICAgICAgICBLZXlDb25kaXRpb25FeHByZXNzaW9uOiBrZXlDb25kaXRpb25FeHByZXNzaW9uLFxuICAgICAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogZXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkb2NDbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5JdGVtcyB8fCBbXTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgcXVlcnlHU0koZ3NpUEs6IHN0cmluZywgZ3NpU0s/OiBzdHJpbmcsIGluZGV4TmFtZTogc3RyaW5nID0gJ0dTSTEnKSB7XG4gICAgICAgIGNvbnN0IGtleUNvbmRpdGlvbkV4cHJlc3Npb24gPSBnc2lTS1xuICAgICAgICAgICAgPyBgJHtpbmRleE5hbWV9UEsgPSA6Z3NpUEsgQU5EIGJlZ2luc193aXRoKCR7aW5kZXhOYW1lfVNLLCA6Z3NpU0spYFxuICAgICAgICAgICAgOiBgJHtpbmRleE5hbWV9UEsgPSA6Z3NpUEtgO1xuXG4gICAgICAgIGNvbnN0IGV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IGFueSA9IHsgJzpnc2lQSyc6IGdzaVBLIH07XG4gICAgICAgIGlmIChnc2lTSykge1xuICAgICAgICAgICAgZXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1snOmdzaVNLJ10gPSBnc2lTSztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgUXVlcnlDb21tYW5kKHtcbiAgICAgICAgICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRSxcbiAgICAgICAgICAgIEluZGV4TmFtZTogaW5kZXhOYW1lLFxuICAgICAgICAgICAgS2V5Q29uZGl0aW9uRXhwcmVzc2lvbjoga2V5Q29uZGl0aW9uRXhwcmVzc2lvbixcbiAgICAgICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IGV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZG9jQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQuSXRlbXMgfHwgW107XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIHNjYW4oZmlsdGVyRXhwcmVzc2lvbj86IHN0cmluZywgZXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlcz86IGFueSkge1xuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IFNjYW5Db21tYW5kKHtcbiAgICAgICAgICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRSxcbiAgICAgICAgICAgIEZpbHRlckV4cHJlc3Npb246IGZpbHRlckV4cHJlc3Npb24sXG4gICAgICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiBleHByZXNzaW9uQXR0cmlidXRlVmFsdWVzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRvY0NsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0Lkl0ZW1zIHx8IFtdO1xuICAgIH1cbn0iXX0=