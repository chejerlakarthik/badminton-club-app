"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserFromEvent = exports.extractTokenFromEvent = exports.comparePassword = exports.hashPassword = exports.verifyToken = exports.generateToken = exports.JWT_SECRET = void 0;
const jsonwebtoken_1 = require("jsonwebtoken");
const bcryptjs_1 = require("bcryptjs");
exports.JWT_SECRET = process.env.JWT_SECRET || 'fallback-secret';
const generateToken = (payload) => {
    return jsonwebtoken_1.default.sign(payload, exports.JWT_SECRET, { expiresIn: '24h' });
};
exports.generateToken = generateToken;
const verifyToken = (token) => {
    return jsonwebtoken_1.default.verify(token, exports.JWT_SECRET);
};
exports.verifyToken = verifyToken;
const hashPassword = async (password) => {
    return bcryptjs_1.default.hash(password, 10);
};
exports.hashPassword = hashPassword;
const comparePassword = async (password, hash) => {
    return bcryptjs_1.default.compare(password, hash);
};
exports.comparePassword = comparePassword;
const extractTokenFromEvent = (event) => {
    const authHeader = event.headers.authorization || event.headers.Authorization;
    if (!authHeader)
        return null;
    const parts = authHeader.split(' ');
    if (parts.length !== 2 || parts[0] !== 'Bearer')
        return null;
    return parts[1] || null;
};
exports.extractTokenFromEvent = extractTokenFromEvent;
const getUserFromEvent = (event) => {
    const token = (0, exports.extractTokenFromEvent)(event);
    if (!token) {
        throw new Error('No authorization token provided');
    }
    try {
        return (0, exports.verifyToken)(token);
    }
    catch (error) {
        throw new Error('Invalid authorization token');
    }
};
exports.getUserFromEvent = getUserFromEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcHAvdXRpbHMvYXV0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBK0I7QUFDL0IsdUNBQThCO0FBU2pCLFFBQUEsVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLGlCQUFpQixDQUFDO0FBRS9ELE1BQU0sYUFBYSxHQUFHLENBQUMsT0FBbUIsRUFBVSxFQUFFO0lBQ3pELE9BQU8sc0JBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGtCQUFVLEVBQUUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUMvRCxDQUFDLENBQUM7QUFGVyxRQUFBLGFBQWEsaUJBRXhCO0FBRUssTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFhLEVBQWMsRUFBRTtJQUNyRCxPQUFPLHNCQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxrQkFBVSxDQUFlLENBQUM7QUFDdkQsQ0FBQyxDQUFDO0FBRlcsUUFBQSxXQUFXLGVBRXRCO0FBRUssTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUFFLFFBQWdCLEVBQW1CLEVBQUU7SUFDcEUsT0FBTyxrQkFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDO0FBRlcsUUFBQSxZQUFZLGdCQUV2QjtBQUVLLE1BQU0sZUFBZSxHQUFHLEtBQUssRUFBRSxRQUFnQixFQUFFLElBQVksRUFBb0IsRUFBRTtJQUN0RixPQUFPLGtCQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMxQyxDQUFDLENBQUM7QUFGVyxRQUFBLGVBQWUsbUJBRTFCO0FBRUssTUFBTSxxQkFBcUIsR0FBRyxDQUFDLEtBQTJCLEVBQWlCLEVBQUU7SUFDaEYsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7SUFDOUUsSUFBSSxDQUFDLFVBQVU7UUFBRSxPQUFPLElBQUksQ0FBQztJQUU3QixNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVE7UUFBRSxPQUFPLElBQUksQ0FBQztJQUU3RCxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUU7QUFDN0IsQ0FBQyxDQUFDO0FBUlcsUUFBQSxxQkFBcUIseUJBUWhDO0FBRUssTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEtBQTJCLEVBQWMsRUFBRTtJQUN4RSxNQUFNLEtBQUssR0FBRyxJQUFBLDZCQUFxQixFQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsSUFBSSxDQUFDO1FBQ0QsT0FBTyxJQUFBLG1CQUFXLEVBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDYixNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFDbkQsQ0FBQztBQUNMLENBQUMsQ0FBQztBQVhXLFFBQUEsZ0JBQWdCLG9CQVczQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBqd3QgZnJvbSAnanNvbndlYnRva2VuJztcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0anMnO1xuaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5RXZlbnQgfSBmcm9tICdhd3MtbGFtYmRhJztcblxuZXhwb3J0IGludGVyZmFjZSBKV1RQYXlsb2FkIHtcbiAgICB1c2VySWQ6IHN0cmluZztcbiAgICBlbWFpbDogc3RyaW5nO1xuICAgIHJvbGU6ICdtZW1iZXInIHwgJ2FkbWluJztcbn1cblxuZXhwb3J0IGNvbnN0IEpXVF9TRUNSRVQgPSBwcm9jZXNzLmVudi5KV1RfU0VDUkVUIHx8ICdmYWxsYmFjay1zZWNyZXQnO1xuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVUb2tlbiA9IChwYXlsb2FkOiBKV1RQYXlsb2FkKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gand0LnNpZ24ocGF5bG9hZCwgSldUX1NFQ1JFVCwgeyBleHBpcmVzSW46ICcyNGgnIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHZlcmlmeVRva2VuID0gKHRva2VuOiBzdHJpbmcpOiBKV1RQYXlsb2FkID0+IHtcbiAgICByZXR1cm4gand0LnZlcmlmeSh0b2tlbiwgSldUX1NFQ1JFVCkgYXMgSldUUGF5bG9hZDtcbn07XG5cbmV4cG9ydCBjb25zdCBoYXNoUGFzc3dvcmQgPSBhc3luYyAocGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgcmV0dXJuIGJjcnlwdC5oYXNoKHBhc3N3b3JkLCAxMCk7XG59O1xuXG5leHBvcnQgY29uc3QgY29tcGFyZVBhc3N3b3JkID0gYXN5bmMgKHBhc3N3b3JkOiBzdHJpbmcsIGhhc2g6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIHJldHVybiBiY3J5cHQuY29tcGFyZShwYXNzd29yZCwgaGFzaCk7XG59O1xuXG5leHBvcnQgY29uc3QgZXh0cmFjdFRva2VuRnJvbUV2ZW50ID0gKGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudCk6IHN0cmluZyB8IG51bGwgPT4ge1xuICAgIGNvbnN0IGF1dGhIZWFkZXIgPSBldmVudC5oZWFkZXJzLmF1dGhvcml6YXRpb24gfHwgZXZlbnQuaGVhZGVycy5BdXRob3JpemF0aW9uO1xuICAgIGlmICghYXV0aEhlYWRlcikgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBwYXJ0cyA9IGF1dGhIZWFkZXIuc3BsaXQoJyAnKTtcbiAgICBpZiAocGFydHMubGVuZ3RoICE9PSAyIHx8IHBhcnRzWzBdICE9PSAnQmVhcmVyJykgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4gcGFydHNbMV0gfHwgbnVsbCA7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VXNlckZyb21FdmVudCA9IChldmVudDogQVBJR2F0ZXdheVByb3h5RXZlbnQpOiBKV1RQYXlsb2FkID0+IHtcbiAgICBjb25zdCB0b2tlbiA9IGV4dHJhY3RUb2tlbkZyb21FdmVudChldmVudCk7XG4gICAgaWYgKCF0b2tlbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGF1dGhvcml6YXRpb24gdG9rZW4gcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdmVyaWZ5VG9rZW4odG9rZW4pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhdXRob3JpemF0aW9uIHRva2VuJyk7XG4gICAgfVxufTsiXX0=