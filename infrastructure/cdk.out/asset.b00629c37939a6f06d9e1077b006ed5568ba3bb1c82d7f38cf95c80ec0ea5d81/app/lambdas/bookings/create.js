"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const uuid_1 = require("uuid");
const zod_1 = require("zod");
const response_1 = require("../../utils/response");
const auth_1 = require("../../utils/auth");
const database_1 = require("../../utils/database");
const events_1 = require("../../utils/events");
const CreateBookingSchema = zod_1.z.object({
    courtId: zod_1.z.string().uuid(),
    date: zod_1.z.string(),
    startTime: zod_1.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/),
    endTime: zod_1.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/),
    notes: zod_1.z.string().optional()
});
const handler = async (event) => {
    try {
        if (!event.body) {
            return (0, response_1.createErrorResponse)(400, 'Request body is required');
        }
        const user = (0, auth_1.getUserFromEvent)(event);
        const body = JSON.parse(event.body);
        const { courtId, date, startTime, endTime, notes } = CreateBookingSchema.parse(body);
        // Check if court exists
        const court = await database_1.DatabaseService.get(`COURT#${courtId}`, `COURT#${courtId}`);
        if (!court || !court.isActive) {
            return (0, response_1.createErrorResponse)(404, 'Court not found or inactive');
        }
        // Check for conflicting bookings
        const existingBookings = await database_1.DatabaseService.queryGSI(`COURT#${courtId}`, `BOOKING#${date}`, 'GSI2');
        const hasConflict = existingBookings.some((booking) => {
            if (booking.status === 'cancelled')
                return false;
            const existingStart = booking.startTime;
            const existingEnd = booking.endTime;
            return (startTime < existingEnd && endTime > existingStart);
        });
        if (hasConflict) {
            return (0, response_1.createErrorResponse)(400, 'Court is already booked for this time slot');
        }
        // Calculate total amount
        const startHour = parseInt(startTime.split(':')[0] || '0');
        const endHour = parseInt(endTime.split(':')[0] || '0');
        const duration = endHour - startHour;
        const totalAmount = duration * court.hourlyRate;
        const bookingId = (0, uuid_1.v4)();
        const now = new Date().toISOString();
        const booking = {
            PK: `BOOKING#${bookingId}`,
            SK: `BOOKING#${bookingId}`,
            GSI1PK: `USER#${user.userId}`,
            GSI1SK: `BOOKING#${date}#${startTime}`,
            GSI2PK: `COURT#${courtId}`,
            GSI2SK: `BOOKING#${date}#${startTime}`,
            bookingId,
            userId: user.userId,
            courtId,
            date,
            startTime,
            endTime,
            totalAmount,
            status: 'pending',
            paymentStatus: 'pending',
            notes: notes ?? 'No notes provided.',
            createdAt: now,
            updatedAt: now
        };
        await database_1.DatabaseService.put(booking);
        // Publish booking event
        await events_1.EventService.publishBookingEvent('Booking Created', {
            bookingId: booking.bookingId,
            userId: booking.userId,
            courtId: booking.courtId,
            date: booking.date,
            startTime: booking.startTime,
            endTime: booking.endTime,
            totalAmount: booking.totalAmount
        });
        return (0, response_1.createSuccessResponse)(booking, 'Booking created successfully');
    }
    catch (error) {
        console.error('Booking creation error:', error);
        if (error instanceof zod_1.z.ZodError) {
            return (0, response_1.createErrorResponse)(400, error.errors[0]?.message || 'Validation error');
        }
        if (error.message.includes('authorization')) {
            return (0, response_1.createErrorResponse)(401, error.message);
        }
        return (0, response_1.createErrorResponse)(500, 'Internal server error');
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,