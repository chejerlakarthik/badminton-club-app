"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const zod_1 = require("zod");
const response_1 = require("../../utils/response");
const auth_1 = require("../../utils/auth");
const database_1 = require("../../utils/database");
const UpdateProfileSchema = zod_1.z.object({
    firstName: zod_1.z.string().min(1).optional(),
    lastName: zod_1.z.string().min(1).optional(),
    phone: zod_1.z.string().min(10).optional(),
    skillLevel: zod_1.z.enum(['beginner', 'intermediate', 'advanced']).optional()
});
const handler = async (event) => {
    try {
        if (!event.body) {
            return (0, response_1.createErrorResponse)(400, 'Request body is required');
        }
        const user = (0, auth_1.getUserFromEvent)(event);
        const body = JSON.parse(event.body);
        const updates = UpdateProfileSchema.parse(body);
        const updatedUser = await database_1.DatabaseService.update(`USER#${user.userId}`, `USER#${user.userId}`, {
            ...updates,
            updatedAt: new Date().toISOString()
        });
        // Remove sensitive data
        // @ts-ignore
        const { passwordHash, ...safeUserData } = updatedUser;
        return (0, response_1.createSuccessResponse)(safeUserData, 'Profile updated successfully');
    }
    catch (error) {
        console.error('Update profile error:', error);
        if (error instanceof zod_1.z.ZodError) {
            return (0, response_1.createErrorResponse)(400, error.errors[0]?.message || 'Validation error');
        }
        if (error.message.includes('authorization')) {
            return (0, response_1.createErrorResponse)(401, error.message);
        }
        return (0, response_1.createErrorResponse)(500, 'Internal server error');
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXByb2ZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBwL2xhbWJkYXMvdXNlcnMvdXBkYXRlLXByb2ZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsNkJBQXdCO0FBQ3hCLG1EQUFrRjtBQUNsRiwyQ0FBb0Q7QUFDcEQsbURBQXVEO0FBRXZELE1BQU0sbUJBQW1CLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNqQyxTQUFTLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDdkMsUUFBUSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFO0lBQ3RDLEtBQUssRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRTtJQUNwQyxVQUFVLEVBQUUsT0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7Q0FDMUUsQ0FBQyxDQUFDO0FBRUksTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQTJCLEVBQWtDLEVBQUU7SUFDekYsSUFBSSxDQUFDO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNkLE9BQU8sSUFBQSw4QkFBbUIsRUFBQyxHQUFHLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztRQUNoRSxDQUFDO1FBRUQsTUFBTSxJQUFJLEdBQUcsSUFBQSx1QkFBZ0IsRUFBQyxLQUFLLENBQUMsQ0FBQztRQUNyQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxNQUFNLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFaEQsTUFBTSxXQUFXLEdBQUcsTUFBTSwwQkFBZSxDQUFDLE1BQU0sQ0FDNUMsUUFBUSxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQ3JCLFFBQVEsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUNyQjtZQUNJLEdBQUcsT0FBTztZQUNWLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtTQUN0QyxDQUNKLENBQUM7UUFFRix3QkFBd0I7UUFDeEIsYUFBYTtRQUNiLE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxZQUFZLEVBQUUsR0FBRyxXQUFXLENBQUM7UUFFdEQsT0FBTyxJQUFBLGdDQUFxQixFQUFDLFlBQVksRUFBRSw4QkFBOEIsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU5QyxJQUFJLEtBQUssWUFBWSxPQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDOUIsT0FBTyxJQUFBLDhCQUFtQixFQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3BGLENBQUM7UUFFRCxJQUFLLEtBQWUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUM7WUFDckQsT0FBTyxJQUFBLDhCQUFtQixFQUFDLEdBQUcsRUFBRyxLQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUQsQ0FBQztRQUVELE9BQU8sSUFBQSw4QkFBbUIsRUFBQyxHQUFHLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztJQUM3RCxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBckNXLFFBQUEsT0FBTyxXQXFDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCwgQVBJR2F0ZXdheVByb3h5UmVzdWx0IH0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB7IGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZSwgY3JlYXRlRXJyb3JSZXNwb25zZSB9IGZyb20gJy4uLy4uL3V0aWxzL3Jlc3BvbnNlJztcbmltcG9ydCB7IGdldFVzZXJGcm9tRXZlbnQgfSBmcm9tICcuLi8uLi91dGlscy9hdXRoJztcbmltcG9ydCB7IERhdGFiYXNlU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2RhdGFiYXNlJztcblxuY29uc3QgVXBkYXRlUHJvZmlsZVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICBmaXJzdE5hbWU6IHouc3RyaW5nKCkubWluKDEpLm9wdGlvbmFsKCksXG4gICAgbGFzdE5hbWU6IHouc3RyaW5nKCkubWluKDEpLm9wdGlvbmFsKCksXG4gICAgcGhvbmU6IHouc3RyaW5nKCkubWluKDEwKS5vcHRpb25hbCgpLFxuICAgIHNraWxsTGV2ZWw6IHouZW51bShbJ2JlZ2lubmVyJywgJ2ludGVybWVkaWF0ZScsICdhZHZhbmNlZCddKS5vcHRpb25hbCgpXG59KTtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFQSUdhdGV3YXlQcm94eUV2ZW50KTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+ID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWV2ZW50LmJvZHkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKDQwMCwgJ1JlcXVlc3QgYm9keSBpcyByZXF1aXJlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdXNlciA9IGdldFVzZXJGcm9tRXZlbnQoZXZlbnQpO1xuICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5wYXJzZShldmVudC5ib2R5KTtcbiAgICAgICAgY29uc3QgdXBkYXRlcyA9IFVwZGF0ZVByb2ZpbGVTY2hlbWEucGFyc2UoYm9keSk7XG5cbiAgICAgICAgY29uc3QgdXBkYXRlZFVzZXIgPSBhd2FpdCBEYXRhYmFzZVNlcnZpY2UudXBkYXRlKFxuICAgICAgICAgICAgYFVTRVIjJHt1c2VyLnVzZXJJZH1gLFxuICAgICAgICAgICAgYFVTRVIjJHt1c2VyLnVzZXJJZH1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC4uLnVwZGF0ZXMsXG4gICAgICAgICAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBSZW1vdmUgc2Vuc2l0aXZlIGRhdGFcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCB7IHBhc3N3b3JkSGFzaCwgLi4uc2FmZVVzZXJEYXRhIH0gPSB1cGRhdGVkVXNlcjtcblxuICAgICAgICByZXR1cm4gY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlKHNhZmVVc2VyRGF0YSwgJ1Byb2ZpbGUgdXBkYXRlZCBzdWNjZXNzZnVsbHknKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdVcGRhdGUgcHJvZmlsZSBlcnJvcjonLCBlcnJvcik7XG5cbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2Ygei5ab2RFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDAwLCBlcnJvci5lcnJvcnNbMF0/Lm1lc3NhZ2UgfHwgJ1ZhbGlkYXRpb24gZXJyb3InKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UuaW5jbHVkZXMoJ2F1dGhvcml6YXRpb24nKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDAxLCAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNTAwLCAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyk7XG4gICAgfVxufTsiXX0=