"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const zod_1 = require("zod");
const response_1 = require("../../utils/response");
const auth_1 = require("../../utils/auth");
const database_1 = require("../../utils/database");
const crypto = require("node:crypto");
const CreateCourtSchema = zod_1.z.object({
    name: zod_1.z.string().min(1),
    type: zod_1.z.enum(['indoor', 'outdoor']),
    hourlyRate: zod_1.z.number().positive(),
    description: zod_1.z.string().optional()
});
const handler = async (event) => {
    try {
        if (!event.body) {
            return (0, response_1.createErrorResponse)(400, 'Request body is required');
        }
        const user = (0, auth_1.getUserFromEvent)(event);
        // Check if the user is admin
        if (user.role !== 'admin') {
            return (0, response_1.createErrorResponse)(403, 'Admin access required');
        }
        const body = JSON.parse(event.body);
        const courtData = CreateCourtSchema.parse(body);
        const courtId = crypto.randomUUID();
        const now = new Date().toISOString();
        const court = {
            PK: `COURT#${courtId}`,
            SK: `COURT#${courtId}`,
            courtId,
            ...courtData,
            isActive: true,
            createdAt: now,
            updatedAt: now,
            description: courtData.description ?? 'Court 8'
        };
        await database_1.DatabaseService.put(court);
        return (0, response_1.createSuccessResponse)(court, 'Court created successfully');
    }
    catch (error) {
        console.error('Create court error:', error);
        if (error instanceof zod_1.z.ZodError) {
            return (0, response_1.createErrorResponse)(400, error.errors[0]?.message || 'Validation error');
        }
        if (error.message.includes('authorization')) {
            return (0, response_1.createErrorResponse)(401, error.message);
        }
        return (0, response_1.createErrorResponse)(500, 'Internal server error');
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWNvdXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwcC9sYW1iZGFzL2NvdXJ0cy9jcmVhdGUtY291cnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsNkJBQXdCO0FBQ3hCLG1EQUFrRjtBQUNsRiwyQ0FBb0Q7QUFDcEQsbURBQXVEO0FBRXZELHNDQUFzQztBQUV0QyxNQUFNLGlCQUFpQixHQUFHLE9BQUMsQ0FBQyxNQUFNLENBQUM7SUFDL0IsSUFBSSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3ZCLElBQUksRUFBRSxPQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ25DLFVBQVUsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2pDLFdBQVcsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0NBQ3JDLENBQUMsQ0FBQztBQUVJLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUEyQixFQUFrQyxFQUFFO0lBQ3pGLElBQUksQ0FBQztRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDZCxPQUFPLElBQUEsOEJBQW1CLEVBQUMsR0FBRyxFQUFFLDBCQUEwQixDQUFDLENBQUM7UUFDaEUsQ0FBQztRQUVELE1BQU0sSUFBSSxHQUFHLElBQUEsdUJBQWdCLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFFckMsNkJBQTZCO1FBQzdCLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUUsQ0FBQztZQUN4QixPQUFPLElBQUEsOEJBQW1CLEVBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDLENBQUM7UUFDN0QsQ0FBQztRQUVELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sU0FBUyxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoRCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVyQyxNQUFNLEtBQUssR0FBVTtZQUNqQixFQUFFLEVBQUUsU0FBUyxPQUFPLEVBQUU7WUFDdEIsRUFBRSxFQUFFLFNBQVMsT0FBTyxFQUFFO1lBQ3RCLE9BQU87WUFDUCxHQUFHLFNBQVM7WUFDWixRQUFRLEVBQUUsSUFBSTtZQUNkLFNBQVMsRUFBRSxHQUFHO1lBQ2QsU0FBUyxFQUFFLEdBQUc7WUFDZCxXQUFXLEVBQUUsU0FBUyxDQUFDLFdBQVcsSUFBSSxTQUFTO1NBQ2xELENBQUM7UUFFRixNQUFNLDBCQUFlLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWpDLE9BQU8sSUFBQSxnQ0FBcUIsRUFBQyxLQUFLLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFNUMsSUFBSSxLQUFLLFlBQVksT0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzlCLE9BQU8sSUFBQSw4QkFBbUIsRUFBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLElBQUksa0JBQWtCLENBQUMsQ0FBQztRQUNwRixDQUFDO1FBRUQsSUFBSyxLQUFlLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDO1lBQ3JELE9BQU8sSUFBQSw4QkFBbUIsRUFBQyxHQUFHLEVBQUcsS0FBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlELENBQUM7UUFFRCxPQUFPLElBQUEsOEJBQW1CLEVBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDLENBQUM7SUFDN0QsQ0FBQztBQUNMLENBQUMsQ0FBQztBQTlDVyxRQUFBLE9BQU8sV0E4Q2xCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5RXZlbnQsIEFQSUdhdGV3YXlQcm94eVJlc3VsdCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBjcmVhdGVTdWNjZXNzUmVzcG9uc2UsIGNyZWF0ZUVycm9yUmVzcG9uc2UgfSBmcm9tICcuLi8uLi91dGlscy9yZXNwb25zZSc7XG5pbXBvcnQgeyBnZXRVc2VyRnJvbUV2ZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvYXV0aCc7XG5pbXBvcnQgeyBEYXRhYmFzZVNlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9kYXRhYmFzZSc7XG5pbXBvcnQgeyBDb3VydCB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCAqIGFzIGNyeXB0byBmcm9tIFwibm9kZTpjcnlwdG9cIjtcblxuY29uc3QgQ3JlYXRlQ291cnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgbmFtZTogei5zdHJpbmcoKS5taW4oMSksXG4gICAgdHlwZTogei5lbnVtKFsnaW5kb29yJywgJ291dGRvb3InXSksXG4gICAgaG91cmx5UmF0ZTogei5udW1iZXIoKS5wb3NpdGl2ZSgpLFxuICAgIGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKClcbn0pO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogQVBJR2F0ZXdheVByb3h5RXZlbnQpOiBQcm9taXNlPEFQSUdhdGV3YXlQcm94eVJlc3VsdD4gPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghZXZlbnQuYm9keSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDAwLCAnUmVxdWVzdCBib2R5IGlzIHJlcXVpcmVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1c2VyID0gZ2V0VXNlckZyb21FdmVudChldmVudCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHVzZXIgaXMgYWRtaW5cbiAgICAgICAgaWYgKHVzZXIucm9sZSAhPT0gJ2FkbWluJykge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDAzLCAnQWRtaW4gYWNjZXNzIHJlcXVpcmVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5wYXJzZShldmVudC5ib2R5KTtcbiAgICAgICAgY29uc3QgY291cnREYXRhID0gQ3JlYXRlQ291cnRTY2hlbWEucGFyc2UoYm9keSk7XG5cbiAgICAgICAgY29uc3QgY291cnRJZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7XG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcblxuICAgICAgICBjb25zdCBjb3VydDogQ291cnQgPSB7XG4gICAgICAgICAgICBQSzogYENPVVJUIyR7Y291cnRJZH1gLFxuICAgICAgICAgICAgU0s6IGBDT1VSVCMke2NvdXJ0SWR9YCxcbiAgICAgICAgICAgIGNvdXJ0SWQsXG4gICAgICAgICAgICAuLi5jb3VydERhdGEsXG4gICAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbm93LFxuICAgICAgICAgICAgdXBkYXRlZEF0OiBub3csXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogY291cnREYXRhLmRlc2NyaXB0aW9uID8/ICdDb3VydCA4J1xuICAgICAgICB9O1xuXG4gICAgICAgIGF3YWl0IERhdGFiYXNlU2VydmljZS5wdXQoY291cnQpO1xuXG4gICAgICAgIHJldHVybiBjcmVhdGVTdWNjZXNzUmVzcG9uc2UoY291cnQsICdDb3VydCBjcmVhdGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NyZWF0ZSBjb3VydCBlcnJvcjonLCBlcnJvcik7XG5cbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2Ygei5ab2RFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDAwLCBlcnJvci5lcnJvcnNbMF0/Lm1lc3NhZ2UgfHwgJ1ZhbGlkYXRpb24gZXJyb3InKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UuaW5jbHVkZXMoJ2F1dGhvcml6YXRpb24nKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNDAxLCAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVycm9yUmVzcG9uc2UoNTAwLCAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyk7XG4gICAgfVxufTsiXX0=